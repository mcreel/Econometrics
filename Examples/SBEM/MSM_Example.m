## Copyright (C) 2014 Michael Creel
## 
## This program is free software; you can redistribute it and/or modify it
## under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 3 of the License, or
## (at your option) any later version.
## 
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
## 
## You should have received a copy of the GNU General Public License
## along with this program.  If not, see <http://www.gnu.org/licenses/>.
##
## Author: Michael Creel <michael@yosemite>
## Created: 2014-02-03

## usage: MSM_example 
##
## MSM_Example: example of estimation using method of simulated moments.
##
## * the data is generated by a MA(1) model
## * moment conditions are coeffiecients of an AR(p) model,
##   minus their expectations as calculated by simulation
##   from the model (so this is indirect inference, too)
## * the specific implementation of MSM is continuous
##   updating GMM (CU-GMM, see L.-P. Hansen, J. Heaton, A. Yaron
##   Finite-sample properties of some alternative GMM estimators
##   Journal of Business and Economic Statistics, 14 (1996), pp. 262â€“280

1;
# DGP: MA1
function data = dgp(theta, randdraws)
	n = rows(randdraws);
	psi = theta(1,:);
	sig = theta(2,:);
	e = sig*randdraws;
	data = e(2:n,:) + psi*e(1:n-1,:);
endfunction

# auxiliary statistic: fitted coefficients from AR(p) model
function [Z p] = aux_stat(theta, randdraws, p)
	data = dgp(theta, randdraws);
	S = columns(randdraws);
	n = rows(data);
	Z = zeros(S, p+2);
	for s= 1:S
		y = data(:,s);
		yy = data(p+1:n,s);
		x = lags(y,p);
		x = x(p+1:rows(x),:);
		x = [ones(rows(x),1) x];
		beta = ols(yy, x);
		e = yy - x*beta;
		sighat = e'*e/n;
		Z(s,:)= [beta' sighat];
	endfor
endfunction

# CU-GMM objective function for indirect inference
function [obj_value score] = ii_obj(theta, randdraws, Z)
  	p = columns(Z)-2;
	Zs = aux_stat(theta, randdraws, p);
	Zbar = mean(Zs);
	m = Z - Zbar;
	m = m';
	e = Zs - repmat(Zbar,rows(Zs),1);
	V = e'*e/rows(e);
	obj_value = m'*inv(V)*m;
	score = "";
endfunction

n = 1000; # number of obs
S = 5; # replications for II


# draw data and get Z corresponding to the true sample 
randdraws = randn(n+1,1);
psi = 0.5;
sig = 0.5;
theta = [psi; sig];
p = 2; # AR order
Z = aux_stat(theta, randdraws, p);

# get CUE-II
randdraws = randn(n+1,S);
% initial simulated annealing to get good start values
thetastart = [0; 0.1];
[thetahat, obj_value, convergence, iters] = samin("ii_obj", {thetastart, randdraws, Z}, {[-1; 0],[1;2],3,1,0.5,200,3,1e-5,1e-3,2,1});
% now finish off with fminunc
options = optimset('TolFun', 1e-5);
options = optimset(options, 'TolX', 1e-5);
options = optimset(options, 'TolF', 1e-10);
options = optimset(options, 'Display', 'iter');
[thetahat, obj_value, convergence, iters] = fminunc(@(theta) ii_obj(theta, randdraws, Z), thetahat, options);
thetahat


